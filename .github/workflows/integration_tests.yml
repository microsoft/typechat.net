#
# This workflow will build and run all unit tests using dotnet docker containers,
# each targeting a single version of the dotnet SDK.
#

name: build-integrationtest

on:
  workflow_dispatch:
  push: 
    branches: [ "dev/robgruen/workflow_update" ]
  pull_request_target:
    branches: [ "main" ]
  merge_group:
    branches: ["main"]
  schedule:
    - cron: "0 7 * * *" # Run at midnight PDT every day

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: read
  contents: read
  id-token: write

jobs:
  build-integrationtest:
    environment: development
    strategy:
        fail-fast: false
        matrix:
          include:
          - { dotnet: '8.0-jammy', os: 'ubuntu', configuration: Release }

    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:${{ matrix.dotnet }}
      env:
        NUGET_CERT_REVOCATION_MODE: offline
        GITHUB_ACTIONS: 'true'

    steps:

      # The following two steps (permissions checks) ensure that only users with write access can run this workflow on a PR (except the merge queue bot)
      # PRs from forks we check the permissions of the user that triggered the workflow (github.triggering_actor)
      # This means that if a user without write access opens a PR from a fork, they cannot run this workflow
      # Users with write access can still run this workflow on a PR from a fork
      # For PRs from the same repo, we allow the workflow to run as normal
      - name: Get User Permission
        if: ${{ github.event_name == 'pull_request_target' || github.triggering_actor != 'github-merge-queue[bot]' }}
        id: checkAccess
        uses: actions-cool/check-user-permission@v2
        with:
          require: write
          username: ${{ github.triggering_actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check User Permission
        if: ${{ (github.event_name == 'pull_request_target' || github.triggering_actor != 'github-merge-queue[bot]') && steps.checkAccess.outputs.require-result == 'false' }}
        run: |
          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          echo "Current permission level is ${{ steps.checkAccess.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"
          exit 1

      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Build dotnet solutions
        run: |
          export SOLUTIONS=$(find ./ -type f -name "*.sln" | tr '\n' ' ')
          for solution in $SOLUTIONS; do
            dotnet build -c ${{ matrix.configuration }} /warnaserror $solution
          done

      - name: Install Azure CLI
        run: |
          apt-get update && \
          apt-get install -y curl && \
          curl -sL https://aka.ms/InstallAzureCLIDeb | bash

      - name: Login to Azure
        uses: azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENTID }}
          tenant-id: ${{ secrets.AZURE_TENANTID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTIONID }}

      - name: Clear appSettings
        shell: bash
        run: |
          find . -type f -name 'appSettings*.json' -delete
      
      - name: Run Tests
        shell: bash
        env: # Set Azure credentials secret as an input
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_API_KEY }}
          OPENAI_MODEL: ${{ secrets.AZURE_COMPLETION_MODEL }}
          OPENAI_EMBEDDINGMODEL: ${{ secrets.AZURE_EMBEDDING_MODEL }}
        run: |
          dotnet test -c ${{ matrix.configuration }} tests/TypeChat.IntegrationTests/TypeChat.IntegrationTests.csproj --no-build -v Normal --logger trx
